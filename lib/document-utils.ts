import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { saveAs } from 'file-saver';
import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType } from 'docx';
import * as XLSX from 'xlsx';

export type ExportFormat = 'pdf' | 'docx' | 'xlsx';

export interface DocumentContent {
  title: string;
  question: string;
  answer: string;
  verses: Array<{
    reference: string;
    text: string;
    translation?: string;
  }>;
}

/**
 * Exports Bible study content to PDF format
 */
export async function exportToPdf(content: DocumentContent): Promise<void> {
  // Create a temporary div to render the content
  const tempDiv = document.createElement('div');
  tempDiv.className = 'pdf-export p-8';
  tempDiv.style.width = '800px';
  tempDiv.style.position = 'absolute';
  tempDiv.style.left = '-9999px';
  tempDiv.style.backgroundColor = '#ffffff';
  tempDiv.style.color = '#000000';
  
  // Add content to the div with enhanced styling
  tempDiv.innerHTML = `
    <div style="border: 1px solid #cccccc; padding: 20px; border-radius: 8px;">
      <h1 style="font-size: 28px; font-weight: bold; margin-bottom: 24px; text-align: center; color: #000000;">${content.title}</h1>
      
      <div style="margin-bottom: 30px; padding: 15px; border-radius: 6px; background-color: #f8f8f8;">
        <h2 style="font-size: 20px; font-weight: bold; margin-bottom: 10px; color: #000000; border-bottom: 2px solid #3366cc; padding-bottom: 5px;">Question</h2>
        <p style="margin-bottom: 0; color: #000000; font-size: 16px;">${content.question}</p>
      </div>
      
      <div style="margin-bottom: 30px;">
        <h2 style="font-size: 20px; font-weight: bold; margin-bottom: 10px; color: #000000; border-bottom: 2px solid #3366cc; padding-bottom: 5px;">Answer</h2>
        <p style="margin-bottom: 0; color: #000000; font-size: 16px; line-height: 1.5;">${content.answer.replace(/\n/g, '<br/>')}</p>
      </div>
      
      ${content.verses.length > 0 ? `
      <div style="margin-bottom: 30px;">
        <h2 style="font-size: 20px; font-weight: bold; margin-bottom: 15px; color: #000000; border-bottom: 2px solid #3366cc; padding-bottom: 5px;">Referenced Verses</h2>
        ${content.verses.map(verse => `
          <div style="margin-bottom: 20px; padding: 10px; border-left: 4px solid #3366cc; background-color: #f8f8f8;">
            <h3 style="font-size: 18px; font-weight: bold; color: #000000; margin-bottom: 8px;">${verse.reference} ${verse.translation ? `(${verse.translation})` : ''}</h3>
            <p style="color: #000000; font-size: 16px; margin: 0; font-style: italic;">${verse.text}</p>
          </div>
        `).join('')}
      </div>
      ` : ''}
      
      <div style="margin-top: 30px; text-align: center; border-top: 1px solid #cccccc; padding-top: 15px;">
        <p style="color: #666666; font-size: 14px;">Generated by BibScrip | ${new Date().toLocaleDateString()}</p>
      </div>
    </div>
  `;
  
  document.body.appendChild(tempDiv);
  
  try {
    // Render the div to canvas
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      useCORS: true,
      logging: false
    });
    
    // Create PDF from canvas
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;
    
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;
    
    // Add new pages if content exceeds one page
    while (heightLeft > 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }
    
    // Save the PDF
    pdf.save(`${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`);
  } finally {
    // Clean up
    document.body.removeChild(tempDiv);
  }
}

/**
 * Exports Bible study content to DOCX format
 */
export async function exportToDocx(content: DocumentContent): Promise<void> {
  // Create a new document
  const doc = new Document({
    sections: [{
      properties: {},
      children: [
        // Title
        new Paragraph({
          text: content.title,
          heading: HeadingLevel.HEADING_1,
          alignment: AlignmentType.CENTER,
        }),
        
        // Question section
        new Paragraph({
          text: "Question",
          heading: HeadingLevel.HEADING_2,
          spacing: { before: 400 },
        }),
        new Paragraph({
          children: [
            new TextRun({
              text: content.question,
              size: 24,
            }),
          ],
          spacing: { after: 400 },
        }),
        
        // Answer section
        new Paragraph({
          text: "Answer",
          heading: HeadingLevel.HEADING_2,
        }),
        ...content.answer.split('\n').map(line => 
          new Paragraph({
            children: [
              new TextRun({
                text: line,
                size: 24,
              }),
            ],
          })
        ),
        
        // Verses section (if any)
        ...(content.verses.length > 0 ? [
          new Paragraph({
            text: "Referenced Verses",
            heading: HeadingLevel.HEADING_2,
            spacing: { before: 400 },
          }),
          ...content.verses.flatMap(verse => [
            new Paragraph({
              text: `${verse.reference} ${verse.translation ? `(${verse.translation})` : ''}`,
              heading: HeadingLevel.HEADING_3,
              spacing: { before: 300 },
            }),
            new Paragraph({
              children: [
                new TextRun({
                  text: verse.text,
                  size: 24,
                }),
              ],
              spacing: { after: 300 },
            }),
          ]),
        ] : []),
        
        // Footer
        new Paragraph({
          children: [
            new TextRun({
              text: `Generated by BibScrip | ${new Date().toLocaleDateString()}`,
              size: 20,
            }),
          ],
          alignment: AlignmentType.CENTER,
          spacing: { before: 500 },
        }),
      ],
    }],
  });
  
  // Generate and save the document
  const buffer = await Packer.toBuffer(doc);
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });
  saveAs(blob, `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.docx`);
}

/**
 * Exports Bible study content to Excel format
 */
export async function exportToExcel(content: DocumentContent): Promise<void> {
  // Create workbook and worksheet
  const wb = XLSX.utils.book_new();
  
  // Create data for the main worksheet
  const mainData = [
    ['BibScrip Study Export'],
    [],
    ['Question', content.question],
    [],
    ['Answer'],
    ...content.answer.split('\n').map(line => [line]),
  ];
  
  // Add verses if available
  if (content.verses.length > 0) {
    mainData.push(
      [],
      ['Referenced Verses'],
    );
    
    content.verses.forEach(verse => {
      mainData.push(
        [`${verse.reference} ${verse.translation ? `(${verse.translation})` : ''}`],
        [verse.text],
        []
      );
    });
  }
  
  // Add footer
  mainData.push(
    [],
    [`Generated by BibScrip | ${new Date().toLocaleDateString()}`]
  );
  
  // Create worksheet from data
  const ws = XLSX.utils.aoa_to_sheet(mainData);
  
  // Set column widths
  const colWidths = [{ wch: 25 }, { wch: 75 }];
  ws['!cols'] = colWidths;
  
  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, 'BibScrip Study');
  
  // Create a separate verses worksheet if there are verses
  if (content.verses.length > 0) {
    const versesData = [
      ['Reference', 'Translation', 'Text']
    ];
    
    content.verses.forEach(verse => {
      versesData.push([
        verse.reference,
        verse.translation || '',
        verse.text
      ]);
    });
    
    const versesWs = XLSX.utils.aoa_to_sheet(versesData);
    versesWs['!cols'] = [{ wch: 20 }, { wch: 15 }, { wch: 70 }];
    XLSX.utils.book_append_sheet(wb, versesWs, 'Verses');
  }
  
  // Generate Excel file and save
  const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  saveAs(blob, `${content.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.xlsx`);
}

/**
 * Main export function that handles different formats
 */
export async function exportDocument(content: DocumentContent, format: ExportFormat): Promise<void> {
  switch (format) {
    case 'pdf':
      await exportToPdf(content);
      break;
    case 'docx':
      await exportToDocx(content);
      break;
    case 'xlsx':
      await exportToExcel(content);
      break;
    default:
      throw new Error(`Unsupported format: ${format}`);
  }
}
